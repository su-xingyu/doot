// --- Serializer definition ---
.decl isSerializerMethod(?method:Method)
isSerializerMethod("<InlineB: java.lang.String toHexString(java.lang.String)>").

.decl SerializerInputParam(?method:Method, ?index:number)
SerializerInputParam("<InlineB: java.lang.String toHexString(java.lang.String)>", 0).

// serializerValue is treated as a special heap value to fit in the framework
.decl Serializer(?serializerValue:Value, ?input:Value, ?output:Var, ?method:Method)

.decl isSerializerValue(?serializerValue:Value)

// --- Deserializer definition ---
.decl isDeserializerMethod(?method:Method)
isDeserializerMethod("<InlineB: java.lang.String fromHexString(java.lang.String)>").

.decl DeserializerInputParam(?method:Method, ?index:number)
DeserializerInputParam("<InlineB: java.lang.String fromHexString(java.lang.String)>", 0).

.decl Deserializer(?input:Var, ?output:Var, ?method:Method, ?insn:Instruction)

// --- Optimization definition ---
.decl isInverse(?serializerMethod:Method, ?deserializerMethod:Method)
isInverse("<InlineB: java.lang.String toHexString(java.lang.String)>", "<InlineB: java.lang.String fromHexString(java.lang.String)>").

// Only within the context of serialization
.decl ValuePairToOptimize(?serializerInput:Value, ?deserializerOutput:Var)

.decl ValuePairToOptimizeTyped(?serializerInput: Value, ?deserializerOutput: Var, ?type: symbol)
.output ValuePairToOptimizeTyped

// --- Must analysis definition ---
.decl MustPointToSerializerValue(?var:Var, ?serializerValue:Value, ?insn:Instruction)

.decl MustPointToSerializerValueUpToPhiInstruction(?serializerValue:Value, ?insn:Instruction)

.decl InstanceFieldMustPointToSerializerValue(?base:Value, ?field:Field, ?serializerValue:Value, ?insn:Instruction)

// --- Optimization rules ---
// Reuse mainAnalysis.VarPointsTo for context-sensitive analysis
// Must register the type of ?serializerValue to make things work
mainAnalysis.Value_Type(?serializerValue, ?type),
Serializer(?serializerValue, ?input, ?output, ?inmethod),
isSerializerValue(?serializerValue),
mainAnalysis.configuration.RecordContextRequest(?ctx, ?serializerValue, ?output) :-
    isSerializerMethod(?inmethod),
    mainAnalysis.CallGraphEdge(?ctx, ?invocation, _, ?inmethod),
    AssignReturnValue(?invocation, ?output),
    SerializerInputParam(?inmethod, ?index),
    ActualParam(?index, ?invocation, ?input),
    Method_ReturnType(?inmethod, ?type),
    ?serializerValue = cat("<", cat(?inmethod, cat(": ", cat(?input, ">")))).

Deserializer(?input, ?output, ?inmethod, ?invocation) :-
    isDeserializerMethod(?inmethod),
    mainAnalysis.CallGraphEdge(_, ?invocation, _, ?inmethod),
    AssignReturnValue(?invocation, ?output),
    DeserializerInputParam(?inmethod, ?index),
    ActualParam(?index, ?invocation, ?input).

ValuePairToOptimize(?serializerInput, ?deserializerOutput) :-
    isInverse(?serializerMethod, ?deserializerMethod),
    Serializer(?serializerValue, ?serializerInput, _, ?serializerMethod),
    Deserializer(?deserializerInput, ?deserializerOutput, ?deserializerMethod, ?insn),
    MustPointToSerializerValue(?deserializerInput, ?serializerValue, ?prev),
    NextInSameBasicBlock(?prev, ?insn).

// In Doop, string constants are represented as $stringConstant variables in its fact sets, we need to convert them
// back to their string values
ValuePairToOptimizeTyped(?stringConstantWithContext, ?deserializerOutput, "STRING") :-
    ValuePairToOptimize(?serializerInput, ?deserializerOutput),
    AssignHeapAllocation(?stringConstant, ?serializerInput, _),
    isStringConstant(?stringConstant),
    Var_DeclaringMethod(?serializerInput, ?method),
    ?stringConstantWithContext = cat(?method, cat("/", ?stringConstant)).

// When ?serializerInput is a normal variable, we need to exclude the possibility of it being string constants
ValuePairToOptimizeTyped(?serializerInput, ?deserializerOutput, "VAR") :-
    ValuePairToOptimize(?serializerInput, ?deserializerOutput),
    isVar(?serializerInput),
    AssignHeapAllocation(?heap, ?serializerInput, _),
    !isStringConstant(?heap).

ValuePairToOptimizeTyped(?serializerInput, ?deserializerOutput, "VAR") :-
    ValuePairToOptimize(?serializerInput, ?deserializerOutput),
    isVar(?serializerInput),
    !AssignHeapAllocation(_, ?serializerInput, _).

// --- Must analysis rules ---
MustPointToSerializerValue(?serializerOutput, ?serializerValue, ?insn) :-
    Serializer(?serializerValue, _, ?serializerOutput, _),
    AssignReturnValue(?insn, ?serializerOutput).

// ?serializerValue cannot be simply treated as a heap allocation as in common point-to analysis. Any modification of
// its field should invalidate the must-point-to relation. This constraint also makes inter-procedural must-point-to
// analysis difficult
MustPointToSerializerValue(?var, ?serializerValue, ?insn) :-
    MustPointToSerializerValue(?var, ?serializerValue, ?prev),
    NextInSameBasicBlock(?prev, ?insn),
    !isMonitorInstruction(?insn),
    !isMethodInvocation(?insn),
    !StoreInstruction(?insn).

// We over-approximate the point-to information towards ?serializerValue here to help with identifying whether function
// arguments will possibly modify a ?serializerValue
mainAnalysis.InstanceFieldPointsTo(?hctx, ?basevalue, ?signature, ?basehctx, ?basevalue) :-
    mainAnalysis.InstanceFieldPointsTo(?hctx, _, ?signature, ?basehctx, ?basevalue),
    isSerializerValue(?basevalue).

MustPointToSerializerValue(?var, ?serializerValue, ?insn) :-
    MustPointToSerializerValue(?var, ?serializerValue, ?prev),
    NextInSameBasicBlock(?prev, ?insn),
    ActualParam(_, ?insn, ?param),
    !mainAnalysis.VarPointsTo(_, ?serializerValue, _, ?param).

MustPointToSerializerValue(?to, ?serializerValue, ?insn) :-
    MustPointToSerializerValue(?from, ?serializerValue, ?prev),
    NextInSameBasicBlock(?prev, ?insn),
    AssignLocal_From(?insn, ?from),
    !PhiNodeHead(?insn, _),
    AssignInstruction_To(?insn, ?to).

MustPointToSerializerValue(?to, ?serializerValue, ?insn) :-
    MustPointToSerializerValue(?from, ?serializerValue, ?prev),
    NextInSameBasicBlock(?prev, ?insn),
    AssignCast_From(?insn, ?from),
    AssignInstruction_To(?insn, ?to).

MustPointToSerializerValue(?var, ?serializerValue, ?insn) :-
    MustPointToSerializerValueUpToPhiInstruction(?serializerValue, ?insn),
    !(NextInSamePhiNode(?insn, _)),
    AssignInstruction_To(?insn, ?var).

MustPointToSerializerValueUpToPhiInstruction(?serializerValue, ?insn) :-
    MustPointToSerializerValue(?from, ?serializerValue, ?prev),
    NextInSameBasicBlock(?prev, ?insn),
    AssignLocal_From(?insn, ?from),
    PhiNodeHead(_, ?insn).

MustPointToSerializerValueUpToPhiInstruction(?serializerValue, ?insn) :-
    MustPointToSerializerValueUpToPhiInstruction(?serializerValue, ?prev),
    NextInSamePhiNode(?prev, ?insn),
    AssignLocal_From(?insn, ?from),
    MustPointToSerializerValue(?from, ?serializerValue, ?insn).

InstanceFieldMustPointToSerializerValue(?base, ?field, ?serializerValue, ?insn) :-
    MustPointToSerializerValue(?from, ?serializerValue, ?prev),
    NextInSameBasicBlock(?prev, ?insn),
    StoreInstanceField_From(?insn, ?from),
    StoreInstanceField_Base(?insn, ?base),
    FieldInstruction_Signature(?insn, ?field).

MustPointToSerializerValue(?to, ?serializerValue, ?insn) :-
    InstanceFieldMustPointToSerializerValue(?base, ?field, ?serializerValue, ?prev),
    NextInSameBasicBlock(?prev, ?insn),
    FieldInstruction_Signature(?insn, ?field),
    LoadInstanceField_Base(?insn, ?base),
    LoadInstanceField_To(?insn, ?to).

InstanceFieldMustPointToSerializerValue(?base, ?field, ?serializerValue, ?insn) :-
    InstanceFieldMustPointToSerializerValue(?base, ?field, ?serializerValue, ?prev),
    NextInSameBasicBlock(?prev, ?insn),
    !isMonitorInstruction(?insn),
    !isMethodInvocation(?insn),
    !StoreInstruction(?insn).

// --- Utilities ---
.decl StoreInstruction(?insn:Instruction)
StoreInstruction(?insn) :-
    StoreStaticField_From(?insn, _);
    StoreInstanceField_From(?insn, _).





